searchState.loadedDescShard("core_logic", 0, "Core\nthis is where all agent structs are defined and their …\nthis is to commit work it will <code>git add1 and </code>git commit` …\nHere we will have all the constant that will be built and …\nThis crate is for the env vars management we use <code>dotenvy</code> …\nthis is where we are going to handle file prompts that …\nFor Production Standard We need <code>Secrets</code> to be just built …\n<code>machines</code> contructors that will be using all our …\nthis is to pull work it will <code>git checkout and </code>git pull…\nAll prompts for our different agents. Those are only the …\nthis is to pull work it will <code>git checkout and </code>git pull…\nhere will be all the different schemas like we do in <code>Python</code>\nthis is me creating a generic agent with all fields needed …\nwe will need to implement here as there can be several …\nTOOLS <code>structs</code> and <code>impls</code>: we will try to match what the <code>API</code> …\n<code>Schema</code> is constructed and different ones will be stored in …\nhere we will be <code>deserializing</code> the llm’s response, but …\nthis will be the buffer history of messages stored and …\nthis one enum is for the formating or match on messages …\nthis is the message to send after a tool call have been …\nwe define for the agent and then maybe pick what we need …\nmap those to <code>none</code>, <code>auto</code>, <code>required</code>\nthis will be creating a dynamic payload with or without …\nthisis the message transmitter sent through the channels\nthis is the <code>schema</code> of the structured output structure …\nthis is the <code>schema</code> of the structured output structure …\nthis is the structured output field and will use of the …\nthis will be saving the state of indentifed tasks to be …\nhere need to derive <code>Hash</code>, <code>Eq</code>, <code>PartialEq</code> because we are …\nwe provide a <code>HashMap</code> with key value and will use those to …\nusing <code>serde</code> to match the actual real name returned by the …\nWe create a <code>.new()`` object for </code>property<code>field of the</code>tool …\nwe instantiate the container of messages to send\nwe format the messages to send\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCall it like that when wanting to get the schema\nthis set of two functions <code>as_map()</code> and …\ninitialization of model settings\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nwe pass in an array of those formatted messages and this …\nthis is where all tools will be set and hold all necessary …\nso will have <code>MessageToAppend</code> and normal LlmResponse.choices…\nwe create a new instance initialization where …\nused by <code>StructuredOutput::build_schema()</code>\nWe construct out state <code>StructOut</code>\n<strong>object</strong> (<code>NEED</code>): string, defines the type of call …\nfunction to get the full <code>StructOut</code> this is how to call …\nEg. for Human request Analyzer Agent …\nTo make field <code>None</code> if no tools we can just define that …\n<code>ToString::to_string</code>, but without panic on OOM.\nonly type <code>function</code> is supported by Cerebras\ntype is always to be set to ‘object’\nthis would take all fields as Options so that we can use …\nthis is to update the field content of <code>MessagesSent</code> so …\nupdate any model settings field calling …\n<code>git_commit_work_tool</code> This tool commits after work is done …\n<code>git_merge_work_tool</code> This tool git merge the work of a …\n<code>git_pull__work_tool</code> This tool git pull the work of a …\n<code>read_file_tool</code> This tool reads files by providing the full …\n** Sre1 Agent ModelSettings\n** Sre2 Agent ModelSettings\n<code>write_file_tool</code> This tool writes files when provided with …\nTrait to be implemented by all node agents.\nDispatcher continuously receives messages and routes them …\nInitializes the dispatcher and returns a sender to be used …\nfunction that sets env vars\nError for agent stuff\nAgent Creation error\nAgent Machine Creation error\nagent node error\napi call loop function error\nCall Api Machine error\nchannel send error\ncommit command error\nModel Setting Creation error\nPayload Machine Creation error\nCreate Tool Creation error\nGeneral Error implementing serde_json\nimplemented <code>std::env:VarError</code>\nSpecial Secret Env Var Error\nExecute Tool Creation error\nFunction Parameters formatting error\ntuple <code>(TypeUser Content)</code> creation from prompt template …\nGetSchema  error\nHistory machine messages update error\nchannel Join error\nMerge command error\nmessages to send formatting error\nMessages Formatting  error\nimplemented <code>reqwest::Error</code>\nPayload to send formatting error\nPayload Creation error\nPrompt Creation error and also getting prompt template and …\nPrompt Machine error\npull command error\nhuamn request analysis node error\nResponse Fromat Part Creation error\nSchema Creation error\nmessages to send formatting error\nsre1 agent node error\nsre2 agent node error\ntool call api call error\nchannel unknown node error\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.\nfunciton that would build the headers when needed\nThis function receives the name and arguments of the tool …\nthis function checks on the response to see if there is …\nthis one will return the response when there is no more …\nEnv Vars For the agent branches to be pulled simulating …\n<code>main_agent</code> The main_agent will read the report from …\n<code>pr_agent</code>\n<code>sre1_agent</code>\n<code>sre2_agent</code>\nEnv Vars For the agent branches to be pulled simulating …\n<code>human request agent</code>schemas this one will just get tasks …\n<code>main_agent</code>schemas\n<code>sre2_agent</code>schemas\nthis will append to any file desired writing to it file …")